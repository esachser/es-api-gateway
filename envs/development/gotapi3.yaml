---
transports:
  - type: EsHttpTransport
    id: http
    parameters:
      routeContext: "/api/got/v3/teste"
      routes:
        "/":
          - method: GET
            mids: []
          - method: POST
            mids: []
    mids:
      - type: EsMetricsMiddleware
        data:
          prop: response.headers.timems
execution:
  - type: EsPropertyMiddleware
    after: false
    data:
      name: request.prefixUrl
      value: https://httpbin.org/
  - type: EsPropertyMiddleware
    after: false
    data:
      name: urlRequest
      expression: String(ctx.properties.request?.method).toLowerCase()
  - type: EsPropertyMiddleware
    after: false
    data:
      name: urlRequest2
      expression: _.toLower(_.toString(_.get(ctx.properties, 'request.method', '')))
  - type: EsHttpRequestMiddleware
    after: false
    data:
      cache:
        enabled: true
        maxAge: 100000
        maxSize: 10000
      prefixUrl: request.prefixUrl
      url: urlRequest2
  - type: EsPropertyMiddleware
    after: false
    data:
      name: response.headers.content-type
      value: application/json
  - type: EsDecodeMiddleware
    after: false
    data: 
      sourceProp: response.body
      contentType: response.headers.content-type
  # - type: EsPropertyMiddleware
  #   after: false
  #   data:
  #     name: jwskey
  #     value: "123blabla"
  - type: EsPropertyMiddleware
    after: false
    data:
      name: keypass
      value: "esapi"
  - type: EsLoadPrivateKeyMiddleware
    after: false
    data:
      keyFile: server.key
      keyPassProp: "keypass"
      destProp: jwskey
  - type: EsLoadPublicCertificateMiddleware
    after: false
    data:
      certFile: server.crt
      destProp: jwspubliccert
  - type: EsPropertyMiddleware
    after: false
    data:
      name: jwsalg
      value: "RS256"
  - type: EsJwsGenerateMiddleware
    after: false
    data:
      payloadProp: parsedBody
      keyProp: jwskey
      algProp: jwsalg
      destProp: response.headers.jws
  - type: EsPropertyMiddleware
    after: false
    data:
      name: jwsverifyopts
      expression: "{algorithms: [ctx.properties.jwsalg]}"
  - type: EsJwsVerifyMiddleware
    after: false
    data:
      payloadProp: response.headers.jws
      keyProp: jwspubliccert
      algProp: jwsalg
      verifyOptsProp: jwsverifyopts
  - type: EsPropertyMiddleware
    after: false
    data:
      name: response.headers.content-type
      value: application/xml
  - type: EsEncodeMiddleware
    after: false
    data: {}
logging:
  level: info
